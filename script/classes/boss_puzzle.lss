class boss_puzzle {
    property parent;
    property rocker;
    property state;
    property miniboulders;
    property resetmboulders;
    property shakeonce;
    property platarray;
    property platprocess;
    property bgmusic;
    property setwatch;
    property startcam;
    property titletext1;
    property titletext2;
    property rocktimer;
    property flexing;
    property stomping;
    property attacking;
    property ending;
    property toaisjumping;
    property oldstate;
    property numfasthits;
    property numhitsonboss;
    property rockmandead;
    property turaga;
    property explodesound;
    
    method boss_puzzle(param1) {
        this.parent = param1;
        return null;
    }
    
    method initfull() {
        var var1;
        var var2;
        var var3;
        gccollisionphysicsgroup::turnoffnextarea(scslosifoundation::stringtoidentifier("tp00"));
        var1 = gccollisionphysicsgroup::gettriggerplane(scslosifoundation::stringtoidentifier("tp00"));
        gctriggerplane::setplaneresponses(var1, 3, 3);
        this.rocker = new rockman(this.parent.name);
        gccharactermoveinterpreter::checkanimdone(1919627320);
        gccharactermoveinterpreter::checkanimdone(1919627321);
        gccharactermoveinterpreter::checkanimdone(1919627315);
        gccharactermoveinterpreter::checkanimdone(1919627571);
        this.explodesound = new tablecopysound(727);
        this.turaga = new gs_lego_character("oewa", "oewa", "fake", 0, 752, 1.0, 0 - 350.51, "aiin");
        this.turaga.initfull();
        this.turaga.add();
        this.turaga.hide();
        this.turaga.settweakable();
        this.resetmboulders = new lego_timer("rmbl", 5.1, 0);
        this.miniboulders = [ new lego_projectileobject("mb01", this.parent.name), 
            new lego_projectileobject("mb02", this.parent.name), 
            new lego_projectileobject("mb03", this.parent.name), 
            new lego_projectileobject("mb04", this.parent.name), 
            new lego_projectileobject("mb05", this.parent.name), 
            new lego_projectileobject("mb06", this.parent.name), 
            new lego_projectileobject("mb07", this.parent.name), 
            new lego_projectileobject("mb08", this.parent.name), 
            new lego_projectileobject("mb09", this.parent.name), 
            new lego_projectileobject("mb10", this.parent.name), 
            new lego_projectileobject("mb11", this.parent.name), 
            new lego_projectileobject("mb12", this.parent.name), 
            new lego_projectileobject("mb13", this.parent.name), 
            new lego_projectileobject("mb14", this.parent.name), 
            new lego_projectileobject("mb15", this.parent.name), 
            new lego_projectileobject("mb16", this.parent.name), 
            new lego_projectileobject("mb17", this.parent.name), 
            new lego_projectileobject("mb18", this.parent.name), 
            new lego_projectileobject("mb19", this.parent.name), 
            new lego_projectileobject("mb20", this.parent.name) ];
        this.platarray = [ new platform("flr1", this.parent.name), 
            new platform("flr2", this.parent.name), 
            new platform("flr3", this.parent.name), 
            new platform("flr4", this.parent.name), 
            new platform("flr5", this.parent.name), 
            new platform("flr6", this.parent.name), 
            new platform("flr7", this.parent.name), 
            new platform("flr8", this.parent.name), 
            new platform("flr9", this.parent.name) ];
        this.rockmandead = 0;
        this.bgmusic = new legomp3player();
        this.bgmusic.setupforplay("Root/Data/sounds/MUSICpohatutheme");
        gcareadirector::setnearestmax(50);
        this.rocker.initfull();
        this.rocker.rocky.settweakable();
        this.resetmboulders.initfull();
        var2 = 0;
        while ((this.miniboulders.__length - 1) >= var2) {
            this.miniboulders[var2].init(0.1, 0, 0, 0, 0, 0.8, "bld0", "Root/data/levels/lev1/clf2", 60);
            this.miniboulders[var2].setresponse(4, 4, 4);
            this.miniboulders[var2].setposition(0.0, 0.0, 0.0);
            this.miniboulders[var2].ignorecollisionswith(this.rocker.rocky.contid);
            var2 = var2 + 1;
        }
        var2 = 0;
        while ((this.platarray.__length - 1) >= var2) {
            this.platarray[var2].initfull();
            var3 = "plt" + __tostring(var2);
            this.platarray[var2].setupfall(2.0, var3);
            this.platarray[var2].setuptouchshakerotate(1.5, 0.0, 1.5, 0.2);
            var2 = var2 + 1;
        }
        this.reset();
        return null;
    }
    
    method setupstrings() {
        var var1;
        var var2;
        var var3;
        var var4;
        var1 = gcareadirector::getscriptstring(1651471219, 3, 0);
        var2 = gcareadirector::getscriptstring(1651471219, 3, 1);
        var3 = (screeny - 100) + 20;
        var4 = (screeny - 100) + 40;
        this.titletext1 = new gs_legotext("Root/Data/Art/Fonts/BionicleFont", var1, screenx * 0.5, var3, 0, 2.0, 256, 0, 0);
        this.titletext2 = new gs_legotext("Root/Data/Art/Fonts/BionicleFont", var2, screenx * 0.5, var4, 0, 2.0, 256, 0, 0);
        return null;
    }
    
    method showstrings() {
        this.titletext1.initfull();
        this.titletext2.initfull();
        this.titletext1.add();
        this.titletext2.add();
        this.titletext1.show();
        this.titletext2.show();
        return null;
    }
    
    method cleanupstrings() {
        this.titletext1.remove();
        this.titletext2.remove();
        this.titletext1.cleanupfull();
        this.titletext2.cleanupfull();
        this.titletext1 = null;
        this.titletext2 = null;
        return null;
    }
    
    method onevent(param1) {
        var var1;
        var var2;
        var var3;
        var var4;
        var var5;
        var var6;
        var var7;
        var var8;
        var var9;
        if (param1.eventid == 1) {
            var1 = 0;
            while ((this.rocker.rocks.__length - 1) >= var1) {
                if (param1.args[0] == this.rocker.rocks[var1].id) {
                    if (param1.args[1] == scslosifoundation::stringtoidentifier("cnt1")) {
                        debug::print("Got Collisions with " + scslosifoundation::identifiertostring(param1.args[0]));
                        var2 = 1.0;
                        if (this.state == 7) {
                            var2 = 0.2;
                        }
                        globalclass.player.actor.react(0, 1, this.rocker.rocks[var1].id, var2);
                        if (this.state == 7) {
                            globalclass.player.actor.setsplitanimation(1882207289, 0);
                        }
                        this.explode(this.rocker.rocks[var1], 0);
                        this.rocker.rocks[var1].setposition(0.0, 0.0, 0.0);
                    }
                }
                var1 = var1 + 1;
            }
        }
        if (this.platprocess) {
            var1 = 0;
            while ((this.platarray.__length - 1) >= var1) {
                this.platarray[var1].onevent(param1);
                var1 = var1 + 1;
            }
        }
        if (param1.eventid == 7) {
            if (param1.args[0] == 1937010290) {
                if ((param1.args[1] == 1919627571) || (param1.args[1] == 1919627315)) {
                    gcstaticsoundsptrarray::playtablesound(524);
                }
            }
        }
        else if (param1.eventid == 11) {
            if (param1.args[1] == 1919627571) {
                this.rocker.rocky.aiidle();
                if (this.numhitsonboss < 5) {
                    debug::print("going to start state");
                    this.state = 6;
                    this.rocktimer = 0;
                }
                if (this.numhitsonboss == 4) {
                    this.rocktimer = 3;
                }
            }
            else if (param1.args[1] == 1919627315) {
                if (this.state == 1) {
                    this.state = 2;
                }
            }
            else if (param1.args[1] == 1919627320) {
                this.rocker.throwrock();
                if (this.state == 7) {
                    this.numfasthits = this.numfasthits + 1;
                }
            }
            else if (param1.args[1] == 1919627321) {
                if (this.state == 7) {
                    this.attacking = 0;
                }
                else {
                    if (this.state != 0) {
                        this.state = 4;
                        debug::print("Going to wait state from THROW2");
                    }
                    if (this.numhitsonboss == 4) {
                        this.rocktimer = 3;
                    }
                    else {
                        this.rocktimer = 0;
                    }
                }
            }
            else if (param1.args[1] == 1919627568) {
                this.shake();
                this.toaisjumping = globalclass.player.actor.isjumping();
                if (this.toaisjumping == 0) {
                    globalclass.player.actor.setsplitanimation(1882207289, -1);
                }
                gcstaticsoundsptrarray::playtablesound(523);
            }
            else if (param1.args[1] == 1919627569) {
                this.shake();
                if (this.state != 0) {
                    this.state = 4;
                    debug::print("Going to wait state from STOMP2");
                }
                this.flexing = 0;
                if (this.numhitsonboss == 4) {
                    this.rocktimer = 3;
                }
                else {
                    this.rocktimer = 0;
                }
                gcstaticsoundsptrarray::playtablesound(523);
            }
        }
        else if (param1.eventid == 13) {
            if (this.rocker.curstate == 2) {
                this.rocker.morph(0);
            }
            else if (this.rocker.curstate == 0) {
                this.rocker.rocky.setsplitanimation(1919627571, -1);
            }
            else if (this.rocker.curstate == 1) {
                this.state = 9;
                gccharacter::setdisplaymorphmodel(this.rocker.rocky.handle, 2);
                this.rocktimer = 0;
            }
            else if (this.rocker.curstate == 3) {
                gccharacter::setdisplaymorphmodel(this.rocker.rocky.handle, 4);
                var1 = 0;
                while ((this.platarray.__length - 1) >= var1) {
                    this.platarray[var1].drop();
                    var1 = var1 + 1;
                }
                gccharacter::setupmoveable(this.rocker.rocky.handle, 15.0, 0.8, 1, 0, 0);
                this.explode(this.rocker.rocky, 1);
                this.rocktimer = 2;
            }
        }
        else if (param1.eventid == 17) {
            if (param1.args[0] == scslosifoundation::stringtoidentifier("rk01")) {
                if (this.shakeonce) {
                    if (param1.args[1] > 20.0) {
                        var3 = globalclass.player.actor.getpos();
                        var4 = var3.x1;
                        var5 = var3.y1;
                        var6 = var3.z;
                        if ((param1.args[2] > (var4 - 12.0)) && (param1.args[2] < (var4 + 12.0))) {
                            if ((param1.args[3] > (var5 - 3.0)) && (param1.args < (var5 + 5.0))) {
                                if ((param1.args[4] > (var6 - 12.0)) && (param1.args[4] < (var6 + 12.0))) {
                                    this.shakeonce = 0;
                                    this.shake();
                                }
                            }
                        }
                    }
                }
                this.explode(this.rocker.rocks[0], 0);
            }
            if (param1.args[0] == scslosifoundation::stringtoidentifier("rk02")) {
                if (this.shakeonce) {
                    if (param1.args[1] > 20.0) {
                        var3 = globalclass.player.actor.getpos();
                        var4 = var3.x1;
                        var5 = var3.y1;
                        var6 = var3.z;
                        if ((param1.args[2] > (var4 - 12.0)) && (param1.args[2] < (var4 + 12.0))) {
                            if ((param1.args[3] > (var5 - 3.0)) && (param1.args < (var5 + 5.0))) {
                                if ((param1.args[4] > (var6 - 12.0)) && (param1.args[4] < (var6 + 12.0))) {
                                    this.shakeonce = 0;
                                    this.shake();
                                }
                            }
                        }
                    }
                }
                this.explode(this.rocker.rocks[1], 0);
            }
            if (param1.args[0] == scslosifoundation::stringtoidentifier("rk03")) {
                if (this.shakeonce) {
                    if (param1.args[1] > 20.0) {
                        var3 = globalclass.player.actor.getpos();
                        var4 = var3.x1;
                        var5 = var3.y1;
                        var6 = var3.z;
                        if ((param1.args[2] > (var4 - 12.0)) && (param1.args[2] < (var4 + 12.0))) {
                            if ((param1.args[3] > (var5 - 3.0)) && (param1.args < (var5 + 5.0))) {
                                if ((param1.args[4] > (var6 - 12.0)) && (param1.args[4] < (var6 + 12.0))) {
                                    this.shakeonce = 0;
                                    this.shake();
                                }
                            }
                        }
                    }
                }
                this.explode(this.rocker.rocks[2], 0);
            }
            if (param1.args[0] == scslosifoundation::stringtoidentifier("rk04")) {
                if (this.shakeonce) {
                    if (param1.args[1] > 20.0) {
                        var3 = globalclass.player.actor.getpos();
                        var4 = var3.x1;
                        var5 = var3.y1;
                        var6 = var3.z;
                        if ((param1.args[2] > (var4 - 12.0)) && (param1.args[2] < (var4 + 12.0))) {
                            if ((param1.args[3] > (var5 - 3.0)) && (param1.args < (var5 + 5.0))) {
                                if ((param1.args[4] > (var6 - 12.0)) && (param1.args[4] < (var6 + 12.0))) {
                                    this.shakeonce = 0;
                                    this.shake();
                                }
                            }
                        }
                    }
                }
                this.explode(this.rocker.rocks[3], 0);
            }
        }
        else if (param1.eventid == 14) {
            if (this.numhitsonboss == 0) {
                this.attacking = 0;
                this.rocker.morph(0);
                this.rocker.rocky.setevilpermanent(0);
            }
            else if (this.numhitsonboss == 4) {
                this.rocker.rocky.setsplitanimation(1919627571, -1);
                this.state = 6;
                this.rocktimer = 0;
                globalclass.player.actor.idle();
            }
            else if (this.numhitsonboss == 5) {
                this.rocker.morph(1);
                this.state = 0;
                this.rockmandead = 1;
                this.platprocess = 1;
                globalclass.player.actor.idle();
                this.parent.level.cam.setaimode(0);
            }
            debug::print("rarrrgh!");
            this.parent.level.cam.setaimode(0);
        }
        else if (param1.eventid == 4) {
            if (param1.args[0] == scslosifoundation::stringtoidentifier("tp01")) {
                if (this.startcam == 1) {
                    var7 = this.rocker.rocky.getposx();
                    var8 = this.rocker.rocky.getposy();
                    var9 = this.rocker.rocky.getposz();
                    this.parent.level.cam.interpolate(var7, var8 + 10, var9 + 30, var7, var8 + 10, var9, 3);
                    this.bgmusic.play(1);
                    this.startcam = 0;
                }
            }
            param1.args[0];
        }
        else if (param1.eventid == 1) {
            if (param1.args[1] == 1937010290) {
                if (((param1.args[0] == 1633840228) || (param1.args[0] == 1650617444)) || (param1.args[0] == 1667394660)) {
                    debug::print("****OWWWWWWW!!!!");
                    this.rocker.rocky.aireact(1, 1, param1.args[0]);
                    if (param1.args[0] == 1633840228) {
                        this.explode(globalclass.player.elementcontrol.elements[3].kboulder1, 0);
                    }
                    else if (param1.args[0] == 1650617444) {
                        this.explode(globalclass.player.elementcontrol.elements[3].kboulder2, 0);
                    }
                    else if (param1.args[0] == 1667394660) {
                        this.explode(globalclass.player.elementcontrol.elements[3].kboulder3, 0);
                    }
                    this.hitboss();
                }
            }
        }
        else if (param1.eventid == 46) {
            this.state = 0;
            this.oldstate = 0;
            debug::print("Resetting to NO_STATE from PLAYER_IS_DEAD");
        }
        else if (param1.eventid == 27) {
            globalclass.player.actor.gotopos(this.parent.enterstartid, this.parent.enterlookid);
            globalclass.player.unkill();
            globalclass.player.actor.setinputstate("ninp");
            this.parent.level.cam.setaimode(11);
            if (this.rockmandead == 0) {
                this.reset();
            }
            globalclass.player.actor.idle();
            this.bgmusic.stop();
        }
        return null;
    }
    
    method process(param1) {
        var var1;
        var var2;
        var var3;
        this.rocker.process(param1);
        if (((this.state == 5) && (this.attacking == 0)) && (this.oldstate != 6)) {
            globalclass.randnum.setseed(param1.currenttime);
            var1 = globalclass.randnum.getrandomnumber(0, 10);
            if (this.numhitsonboss == 4) {
                if (var1 < 5) {
                    this.state = 1;
                }
            }
            else if (var1 < 2) {
                this.state = 1;
            }
        }
        this.rocktimer = this.rocktimer + param1.deltatime;
        if (this.state == 6) {
            if (this.rocktimer > 3) {
                debug::print("Going to attack state");
                this.parent.level.cam.setaimode(11);
                this.state = 5;
                debug::print("Going to attack state");
                gccharacter::aiwatchtarget(this.rocker.rocky.handle);
                this.rocktimer = 0;
            }
        }
        else if (this.state == 4) {
            if (this.oldstate == 2) {
                gccharactermoveinterpreter::stopcheckanimdone(1919627568);
                gccharactermoveinterpreter::stopcheckanimdone(1919627569);
                this.rocktimer = 0;
                this.stomping = 0;
                if (this.toaisjumping == 0) {
                    this.state = 7;
                    debug::print("Setting state to HITFAST");
                    globalclass.player.actor.setsplitanimation(1882207289, -1);
                }
            }
            if (this.rocktimer > 3) {
                this.state = 5;
                debug::print("Going to attack state");
                this.attacking = 0;
                this.rocktimer = 0;
            }
        }
        else if (this.state == 2) {
            if (this.stomping == 0) {
                this.rocker.stomp();
                this.stomping = 1;
            }
        }
        else if (this.state == 5) {
            if (this.attacking == 0) {
                this.rocker.rocky.setsplitanimation(1919627320, -1);
                debug::print("Calling throw animation regular attack");
                this.attacking = 1;
            }
        }
        else if (this.state == 1) {
            if (this.flexing == 0) {
                this.rocker.rocky.setsplitanimation(1919627315, -1);
                this.flexing = 1;
            }
        }
        else if (this.state == 7) {
            var2 = 3;
            if (this.numhitsonboss == 4) {
                var2 = 5;
            }
            if (this.numfasthits == var2) {
                this.state = 4;
                debug::print("Going to WAIT_STATE from HITFAST_STATE");
                this.rocktimer = 0;
                this.numfasthits = 0;
                globalclass.player.actor.idle();
            }
            else if (this.attacking == 0) {
                this.rocker.rocky.setsplitanimation(1919627320, -1);
                debug::print("Calling throw animation hit fast");
                this.attacking = 1;
            }
        }
        else if (this.state == 8) {
            if (this.ending == 0) {
                if (this.rocktimer > 10) {
                    debug::print("showing the turaga");
                    this.turaga.show();
                    this.turaga.disableai();
                    this.parent.level.cam.setaimode(11);
                    var3 = 0;
                    while ((this.platarray.__length - 1) >= var3) {
                        this.platarray[var3].hide();
                        var3 = var3 + 1;
                    }
                    this.platprocess = 0;
                    this.ending = 1;
                }
            }
            else {
                this.turaga.watch();
                this.state = 0;
            }
        }
        else if (this.state == 9) {
            if (this.rocktimer > 2.5) {
                this.rocker.morph(1);
                this.state = 8;
                this.rocktimer = 0;
            }
        }
        this.oldstate = this.state;
        if (this.platprocess) {
            var3 = 0;
            while ((this.platarray.__length - 1) >= var3) {
                this.platarray[var3].process(param1);
                var3 = var3 + 1;
            }
        }
        return null;
    }
    
    method input(param1) {
        if (param1.event == 2) {
            if (param1.button == 80) {
                this.hitboss();
            }
            param1.button;
        }
        return null;
    }
    
    method reset() {
        this.startcam = 1;
        this.setwatch = 1;
        this.shakeonce = 1;
        this.rocktimer = 0;
        this.numfasthits = 0;
        this.numhitsonboss = 0;
        this.platprocess = 0;
        this.state = 0;
        this.oldstate = 0;
        debug::print("Resetting to NO_STATE");
        this.flexing = 0;
        this.stomping = 0;
        this.attacking = 0;
        this.toaisjumping = 0;
        this.ending = 0;
        this.rocker.reset();
        return null;
    }
    
    method show() {
        var var1;
        var1 = 0;
        while ((this.miniboulders.__length - 1) >= var1) {
            this.miniboulders[var1].show();
            var1 = var1 + 1;
        }
        var1 = 0;
        while ((this.platarray.__length - 1) >= var1) {
            this.platarray[var1].show();
            var1 = var1 + 1;
        }
        return null;
    }
    
    method cleanupfull() {
        var var1;
        this.state = null;
        this.shakeonce = null;
        this.setwatch = null;
        this.startcam = null;
        this.rocktimer = null;
        this.flexing = null;
        this.stomping = null;
        this.attacking = null;
        this.ending = null;
        this.toaisjumping = null;
        this.oldstate = null;
        this.numfasthits = null;
        this.numhitsonboss = null;
        this.rockmandead = null;
        this.turaga.cleanupfull();
        this.turaga = null;
        if (this.bgmusic != null) {
            this.bgmusic.stop();
            this.bgmusic = null;
        }
        this.rocker.cleanupfull();
        this.rocker = null;
        var1 = 0;
        while ((this.miniboulders.__length - 1) >= var1) {
            this.miniboulders[var1].cleanupfull();
            this.miniboulders[var1] = null;
            var1 = var1 + 1;
        }
        this.miniboulders = null;
        this.resetmboulders.cleanupfull();
        this.resetmboulders = null;
        this.shakeonce = null;
        var1 = 0;
        while ((this.platarray.__length - 1) >= var1) {
            this.platarray[var1].cleanupfull();
            this.platarray[var1] = null;
            var1 = var1 + 1;
        }
        this.platarray = null;
        this.platprocess = null;
        return null;
    }
    
    method cheat() {
        return null;
    }
    
    method explode(param1, param2) {
        var var1;
        var var2;
        var var3;
        var var4;
        var var5;
        var var6;
        var var7;
        var var8;
        var var9;
        var var10;
        var var11;
        var var12;
        if (param2) {
            var1 = param1.getpos();
            var2 = var1.x1;
            var3 = var1.y1;
            var4 = var1.z;
            var5 = 0;
            while ((this.miniboulders.__length - 1) >= var5) {
                var6 = globalclass.randnum.getrandomfloat(0.6, 0.8);
                var7 = globalclass.randnum.getrandomfloat(0 - 1.0, 1.0);
                var8 = globalclass.randnum.getrandomfloat(45.0, 60.0);
                var9 = globalclass.randnum.getrandomfloat(0 - 1.0, 1.0);
                var10 = globalclass.randnum.getrandomfloat(var2, var2 + 10.0);
                var11 = globalclass.randnum.getrandomfloat(var3, var3 + 10.0);
                var12 = globalclass.randnum.getrandomfloat(var4, var4 + 10.0);
                this.miniboulders[var5].setobjscale(var6);
                this.miniboulders[var5].setposition(var10, var11, var12);
                this.miniboulders[var5].setmoveableflags(1, 1, 0, 1);
                this.miniboulders[var5].setvelocity(var7, var8, var9);
                var5 = var5 + 1;
            }
            param1.hide();
            this.resetmboulders.reset(0);
            this.resetmboulders.start();
        }
        else {
            var2 = param1.getx();
            var3 = param1.gety();
            var4 = param1.getz();
            this.explodesound.synctocharacter(scslosifoundation::stringtoidentifier("cnt1"));
            this.explodesound.play();
            var5 = 0;
            while ((this.miniboulders.__length - 1) >= var5) {
                var6 = globalclass.randnum.getrandomfloat(0.01, 0.05);
                var7 = globalclass.randnum.getrandomfloat(0 - 15.0, 15.0);
                var8 = globalclass.randnum.getrandomfloat(0.0, 5.0);
                var9 = globalclass.randnum.getrandomfloat(0 - 15.0, 15.0);
                var10 = globalclass.randnum.getrandomfloat(var2, var2 + 1.0);
                var11 = globalclass.randnum.getrandomfloat(var3, var3 + 1.0);
                var12 = globalclass.randnum.getrandomfloat(var4, var4 + 1.0);
                this.miniboulders[var5].setobjscale(var6);
                this.miniboulders[var5].setposition(var10, var11, var12);
                this.miniboulders[var5].setmoveableflags(1, 1, 0, 1);
                this.miniboulders[var5].setvelocity(var7, var8, var9);
                var5 = var5 + 1;
            }
            param1.setmoveableflags(0, 0, 0, 0);
            param1.setposition(0.0, 0.0, 0.0);
            this.resetmboulders.reset(0);
            this.resetmboulders.start();
            this.shakeonce = 1;
        }
        return null;
    }
    
    method shake() {
        this.parent.level.cam.shakecamera(0.1, 0.3);
        return null;
    }
    
    method hitboss() {
        var var1;
        var var2;
        var var3;
        var var4;
        if (this.numhitsonboss < 5) {
            this.numhitsonboss = this.numhitsonboss + 1;
            var1 = 0.5;
            if (this.numhitsonboss < 4) {
                this.state = 4;
                debug::print("Going to WAIT_STATE from hitBoss");
                this.rocktimer = 2;
            }
            else {
                this.rocker.rocky.setsplitanimation(scslosifoundation::stringtoidentifier("rk00"), -1);
                var2 = this.rocker.rocky.getposx();
                var3 = this.rocker.rocky.getposy();
                var4 = this.rocker.rocky.getposz();
                if (this.numhitsonboss == 5) {
                    var1 = 2.0;
                }
                this.parent.level.cam.interpolate(var2, var3 + 10, var4 + 30, var2, var3 + 10, var4, var1);
                debug::print("Starting camera interpolate");
                this.state = 0;
            }
            this.attacking = 0;
            this.stomping = 0;
            this.flexing = 0;
        }
        return null;
    }
}
class boss5_puzzle {
    property mparent;
    property mwindy;
    property mwatching;
    property mattacktimer;
    property mprojectiles;
    property mcurrentprojectile;
    property mwaterfalls;
    property mcurrentwaterfall;
    property mshowintro;
    property callattacktimeronce;
    property desctext;
    property howtotext;
    
    method boss5_puzzle(param1) {
        this.mparent = param1;
        return null;
    }
    
    method initfull() {
        var var1;
        var var2;
        var var3;
        this.mcurrentprojectile = 0;
        this.mcurrentwaterfall = 1;
        this.mwatching = 1;
        this.mshowintro = 1;
        this.callattacktimeronce = 1;
        this.mwindy = new gs_lego_character("wndy", "wind", "boss", 0.0, 0.0, 4.2, 0.0, "aiin");
        this.mwindy.initfull();
        this.mwindy.add();
        this.mwindy.show();
        this.mwindy.settweakable();
        this.mwindy.disableai();
        gccharactermoveinterpreter::checkanimdone(scslosifoundation::stringtoidentifier("wi05"));
        gccharactermoveinterpreter::checkanimdone(scslosifoundation::stringtoidentifier("wi08"));
        this.mwaterfalls = [ new boss5_waterfall("wat1", new boss5_point(-20, -25), [ 30, 
                90 ]), 
            new boss5_waterfall("wat2", new boss5_point(0, -33), [ -30, 
                0, 
                0, 
                30 ]), 
            new boss5_waterfall("wat3", new boss5_point(20, -25), [ -90, 
                -30 ]), 
            new boss5_waterfall("wat4", new boss5_point(0, 0), [ -180, 
                -90, 
                90, 
                180 ]) ];
        this.mprojectiles = [ new lego_bossprojectile("stk1"), 
            new lego_bossprojectile("stk2"), 
            new lego_bossprojectile("stk3"), 
            new lego_bossprojectile("wrl1"), 
            new lego_bossprojectile("wrl2"), 
            new lego_bossprojectile("wrl3"), 
            new lego_bossprojectile("bld1"), 
            new lego_bossprojectile("bld2"), 
            new lego_bossprojectile("bld3") ];
        var1 = 0;
        while ((this.mprojectiles.__length - 1) >= var1) {
            if (var1 < 3) {
                this.mprojectiles[var1].init("Root/Data/art/SpriteAnims/sticks", "stick_", 100, 1, 3.0, 0.65, 30.0);
            }
            else if (var1 < 6) {
                this.mprojectiles[var1].init("Root/Data/art/SpriteAnims/rocks", "rock_", 100, 1, 3.0, 0.65, 30.0);
            }
            else if (var1 < 9) {
                this.mprojectiles[var1].init("Root/Data/art/SpriteAnims/whirlwind", "whrlwnd", 100, 24, 8.0, 0.7, 33.0);
            }
            var1 = var1 + 1;
        }
        var2 = gcareadirector::getscriptstring(scslosifoundation::stringtoidentifier("boss"), 1, 0);
        this.desctext = new gs_legotext("Root/Data/Art/Fonts/BionicleFontHi", var2, screenx * 0.5, screeny - 130, 0, 1, 256, 0, 0);
        this.desctext.initfull();
        var3 = (screeny - 100) + 20;
        var2 = gcareadirector::getscriptstring(scslosifoundation::stringtoidentifier("boss"), 1, 1);
        this.howtotext = new gs_legotext("Root/Data/Art/Fonts/BionicleFont", var2, screenx * 0.5, var3, 0, 1, 256, 0, 0);
        this.howtotext.initfull();
        return null;
    }
    
    method initshort() {
        return null;
    }
    
    method playintro() {
        this.mparent.level.cam.makespline("Root/Data/Levels/lev5/boss/boss_CAM.slb");
        this.mparent.level.cam.setspline(0, 10.0, 1, 0);
        this.mparent.level.cam.setaimode(2);
        this.mparent.level.cam.settargetpos(0.0, 10.0, 4.2);
        this.mparent.level.cam.scaletocutscene();
        this.desctext.add();
        this.desctext.show();
        this.howtotext.add();
        this.howtotext.show();
        globalclass.hud.hide();
        this.mshowintro = 0;
        return null;
    }
    
    method playextro() {
        globalclass.setnextlevel();
        return null;
    }
    
    method cleanupfull() {
        if (!(this.desctext == null)) {
            this.desctext.cleanupfull();
            this.desctext = null;
        }
        if (!(this.howtotext == null)) {
            this.howtotext.cleanupfull();
            this.howtotext = null;
        }
        this.mwindy.cleanupfull();
        this.mwindy = null;
        this.mattacktimer.reset(0);
        this.mattacktimer.cleanupfull();
        this.mattacktimer = null;
        this.mcurrentwaterfall = null;
        this.mcurrentprojectile = null;
        this.mwaterfalls = null;
        this.mprojectiles = null;
        return null;
    }
    
    method process(param1) {
        var var1;
        if (this.mwatching == 0) {
            debug::print("Making Mr. Windy watch me");
            this.mwindy.watch();
            this.mwatching = 1;
        }
        var1 = 0;
        while ((this.mwaterfalls.__length - 1) >= var1) {
            this.mwaterfalls[var1].process();
            var1 = var1 + 1;
        }
        return null;
    }
    
    method onevent(param1) {
        var var1;
        var var2;
        if (param1.eventid == 46) {
            gccollisionphysicsgroup::spinmask(1.2);
        }
        else if (param1.eventid == 27) {
            globalclass.player.actor.gotopos(this.mparent.enterstartid, this.mparent.enterlookid);
            globalclass.player.unkill();
            this.initshort();
        }
        else if (param1.eventid == 6) {
            debug::print("***************** CAMERA IS AT THE END OF THE SPLINE");
            this.mparent.level.cam.setaimode(11);
            this.mparent.level.cam.resetviewport();
            globalclass.hud.show();
            if (this.callattacktimeronce) {
                debug::print("**************CREATTING THE TIMER OBJECT");
                this.mattacktimer = new lego_timer("atak", 3.0, 0);
                this.mattacktimer.initfull();
                debug::print("calling mAttackTimer.Start()");
                this.mattacktimer.reset(0);
                this.mattacktimer.start();
                this.callattacktimeronce = 0;
                this.mwatching = 0;
            }
        }
        else if (param1.eventid == 44) {
            if (this.mshowintro) {
                this.playintro();
            }
        }
        else if (param1.eventid == 11) {
            if (param1.args[0] == scslosifoundation::stringtoidentifier("wndy")) {
                if (param1.args[1] == scslosifoundation::stringtoidentifier("wi05")) {
                    this.throwprojectile(new basicpoint(0.0, 4.0, 4.2));
                }
                else if (param1.args[1] == scslosifoundation::stringtoidentifier("wi08")) {
                    this.mwindy.setpos(this.mwaterfalls[3].mposition.x, 6.0, this.mwaterfalls[3].mposition.y);
                    this.mwindy.setsplitanimation(scslosifoundation::stringtoidentifier("wi07"));
                }
            }
            param1.args[0];
        }
        else if (param1.eventid == 8) {
            debug::print("TIMER event caught");
            if (!(this.mattacktimer == null)) {
                if (param1.args[0] == this.mattacktimer.id) {
                    debug::print("attack timer triggered");
                    this.attack();
                    debug::print("resetting attack timer");
                    this.mattacktimer.reset(1);
                }
            }
        }
        else if (param1.eventid == 1006) {
            debug::print("EP_HURRICANE_EVENT caught");
            var1 = this.mwindy.getorientation();
            debug::print("oriental = " + __tostring(var1));
            var2 = 0;
            while (var2 <= (this.mwaterfalls.__length - 1)) {
                if (this.mwaterfalls[var2].inrange(var1)) {
                    this.mcurrentwaterfall = var2;
                    var2 = (this.mwaterfalls.__length - 1) + 1;
                }
                var2 = var2 + 1;
            }
            if (!(this.mcurrentwaterfall == 3)) {
                this.mwindy.interpolate(this.mwaterfalls[this.mcurrentwaterfall].mposition.x, 6.0, this.mwaterfalls[this.mcurrentwaterfall].mposition.y, 3.0);
            }
        }
        else if (param1.eventid == 12) {
            if (param1.args[0] == scslosifoundation::stringtoidentifier("wndy")) {
                if (this.mwaterfalls[this.mcurrentwaterfall].isactive()) {
                    debug::print("waterfall is active, so hurt the boss and make him fall");
                    this.mwindy.setsplitanimation(scslosifoundation::stringtoidentifier("wi08"));
                    this.mwaterfalls[this.mcurrentwaterfall].enable(0);
                }
                else {
                    debug::print("waterfall is already used up");
                    this.mwindy.interpolate(this.mwaterfalls[3].mposition.x, 6.0, this.mwaterfalls[3].mposition.y, 1.5);
                }
            }
        }
        return null;
    }
    
    method input(param1) {
        if (param1.button == 90) {
            if (param1.event == 2) {
                this.cheat(scslosifoundation::stringtoidentifier("wi00"));
            }
        }
        if (param1.button == 88) {
            if (param1.event == 2) {
                this.cheat(scslosifoundation::stringtoidentifier("wi02"));
            }
        }
        if (param1.button == 67) {
            if (param1.event == 2) {
                this.cheat(scslosifoundation::stringtoidentifier("wi03"));
            }
        }
        if (param1.button == 86) {
            if (param1.event == 2) {
                this.cheat(scslosifoundation::stringtoidentifier("wi04"));
            }
        }
        if (param1.button == 66) {
            if (param1.event == 2) {
                this.cheat(scslosifoundation::stringtoidentifier("wi05"));
            }
        }
        if (param1.button == 78) {
            if (param1.event == 2) {
                this.cheat(scslosifoundation::stringtoidentifier("wi06"));
            }
        }
        if (param1.button == 77) {
            if (param1.event == 2) {
                this.cheat(scslosifoundation::stringtoidentifier("wi07"));
            }
        }
        if (param1.button == 80) {
            if (param1.event == 2) {
                this.cheat(scslosifoundation::stringtoidentifier("wi08"));
            }
        }
        if (param1.button == 79) {
            if (param1.event == 2) {
                this.cheat(scslosifoundation::stringtoidentifier("wi09"));
            }
        }
        if (param1.button == 89) {
            if (param1.event == 2) {
                this.movecheat(0);
            }
        }
        if (param1.button == 85) {
            if (param1.event == 2) {
                this.movecheat(1);
            }
        }
        if (param1.button == 73) {
            if (param1.event == 2) {
                this.movecheat(2);
            }
        }
        return null;
    }
    
    method cheat(param1) {
        this.mwindy.setsplitanimation(param1);
        return null;
    }
    
    method movecheat(param1) {
        this.mwindy.interpolate(this.mwaterfalls[param1].mposition.x, 6.0, this.mwaterfalls[param1].mposition.y, 3.0);
        this.mcurrentwaterfall = param1;
        return null;
    }
    
    method attack() {
        debug::print("Attack(): setting throw animation");
        this.mwindy.setsplitanimation(scslosifoundation::stringtoidentifier("wi05"));
        return null;
    }
    
    method throwprojectile(param1) {
        if (this.mcurrentprojectile < (this.mprojectiles.__length - 1)) {
            this.mcurrentprojectile = this.mcurrentprojectile + 1;
        }
        else {
            this.mcurrentprojectile = 0;
        }
        this.mprojectiles[this.mcurrentprojectile].launchfrom(param1);
        return null;
    }
}
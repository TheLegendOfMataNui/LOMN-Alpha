class hudthingy {
    property partsarray;
    property headrotate;
    property glowyeyes;
    property lifebar;
    property energybar;
    property redlites;
    property greenlites;
    property movement;
    property onscreen;
    property offx;
    property timeonscreen;
    
    method hudthingy() {
        return null;
    }
    
    method initfull() {
        var var1;
        var var2;
        var var3;
        var var4;
        var var5;
        var var6;
        var var7;
        this.partsarray = [  ];
        this.headrotate = new gs_lego_animatesprite("Root/data/art/hud/turnhead", 0, 24, 1, 10, 20, 0, 74, 84);
        this.partsarray.__append(this.headrotate);
        this.glowyeyes = [ new ss_basesprite("Root/data/art/hud/greeneyesoff", 9, 20, 1, 137, 84), 
            new ss_basesprite("Root/data/art/hud/greeneyeson", 9, 20, 1, 137, 84) ];
        this.partsarray.__append(this.glowyeyes);
        this.lifebar = [ new ss_basesprite("Root/data/art/hud/16x16frntend__clr", 74, 36, 0, 90, 52) ];
        var1 = __toint(3);
        var2 = 0;
        while ((var1 - 1) >= var2) {
            var3 = new ss_basesprite("Root/data/art/hud/16x16circle__clr", 90 + (16 * var2), 36, 0, 106 + (16 * var2), 52);
            this.lifebar.__append(var3);
            var2 = var2 + 1;
        }
        var4 = this.lifebar.__length - 1;
        this.lifebar.__append(new ss_basesprite("Root/data/art/hud/16x16end__clr", this.lifebar[var4].x1 + 15, this.lifebar[var4].y1, 0, this.lifebar[var4].x2 + 15, this.lifebar[var4].y2));
        this.partsarray.__append(this.lifebar);
        var5 = this.lifebar.__length;
        this.energybar = [ new ss_basesprite("Root/data/art/hud/16x16frntend__clr", 74, 64, 0, 90, 80) ];
        var1 = __toint(3);
        var2 = 0;
        while ((var1 - 1) >= var2) {
            var3 = new ss_basesprite("Root/data/art/hud/16x16circle__clr", 90 + (16 * var2), 64, 0, 106 + (16 * var2), 80);
            this.energybar.__append(var3);
            var2 = var2 + 1;
        }
        var4 = this.energybar.__length - 1;
        this.energybar.__append(new ss_basesprite("Root/data/art/hud/16x16end__clr", this.energybar[var4].x1 + 15, this.energybar[var4].y1, 0, this.energybar[var4].x2 + 15, this.energybar[var4].y2));
        this.partsarray.__append(this.energybar);
        this.redlites = [  ];
        var4 = this.lifebar.__length - 1;
        var2 = 0;
        while ((var4 - 2) >= var2) {
            this.redlites.__append(new ss_basesprite("Root/data/art/hud/1redon", 90 + (16 * var2), 36, 0, 106 + (16 * var2), 52));
            var2 = var2 + 1;
        }
        this.partsarray.__append(this.redlites);
        this.greenlites = [  ];
        var4 = this.energybar.__length - 1;
        var2 = 0;
        while ((var4 - 2) >= var2) {
            this.greenlites.__append(new ss_basesprite("Root/data/art/hud/1greenon", 90 + (16 * var2), 64, 0, 106 + (16 * var2), 80));
            var2 = var2 + 1;
        }
        this.partsarray.__append(this.greenlites);
        this.setoffx();
        this.movement = 0;
        this.onscreen = 0;
        this.timeonscreen = 0.0;
        var2 = 0;
        while ((this.partsarray.__length - 1) >= var2) {
            if (__isarray(this.partsarray[var2])) {
                var6 = this.partsarray[var2];
                var7 = 0;
                while ((var6.__length - 1) >= var7) {
                    var6[var7].initfull();
                    var6[var7].enablealphachannel(1);
                    var7 = var7 + 1;
                }
            }
            else {
                this.partsarray[var2].initfull();
                this.partsarray[var2].enablealphachannel(1);
            }
            var2 = var2 + 1;
        }
        this.onscreen = 1;
        this.timeonscreen = 0.0;
        return null;
    }
    
    method cleanupfull() {
        var var1;
        var var2;
        debug::print("[][][]cleanup hud thingy");
        if (!(this.greenlites == null)) {
            var1 = this.greenlites.__length - 1;
            var2 = 0;
            while (var1 >= var2) {
                this.greenlites[var1 - var2].hide();
                this.greenlites[var1 - var2].remove();
                this.greenlites[var1 - var2].cleanupfull();
                this.greenlites[var1 - var2] = null;
                var2 = var2 + 1;
            }
            this.greenlites = null;
        }
        if (!(this.redlites == null)) {
            var1 = this.redlites.__length - 1;
            var2 = 0;
            while (var1 >= var2) {
                this.redlites[var1 - var2].hide();
                this.redlites[var1 - var2].remove();
                this.redlites[var1 - var2].cleanupfull();
                this.redlites[var1 - var2] = null;
                var2 = var2 + 1;
            }
            this.redlites = null;
        }
        if (!(this.energybar == null)) {
            var1 = this.energybar.__length - 1;
            var2 = 0;
            while (var1 >= var2) {
                this.energybar[var1 - var2].hide();
                this.energybar[var1 - var2].remove();
                this.energybar[var1 - var2].cleanupfull();
                this.energybar[var1 - var2] = null;
                var2 = var2 + 1;
            }
            this.energybar = null;
        }
        if (!(this.lifebar == null)) {
            var1 = this.lifebar.__length - 1;
            var2 = 0;
            while (var1 >= var2) {
                this.lifebar[var1 - var2].hide();
                this.lifebar[var1 - var2].remove();
                this.lifebar[var1 - var2].cleanupfull();
                this.lifebar[var1 - var2] = null;
                var2 = var2 + 1;
            }
            this.lifebar = null;
        }
        if (!(this.glowyeyes == null)) {
            var1 = this.glowyeyes.__length - 1;
            var2 = 0;
            while (var1 >= var2) {
                this.glowyeyes[var1 - var2].hide();
                this.glowyeyes[var1 - var2].remove();
                this.glowyeyes[var1 - var2].cleanupfull();
                this.glowyeyes[var1 - var2] = null;
                var2 = var2 + 1;
            }
            this.glowyeyes = null;
        }
        if (!(this.headrotate == null)) {
            this.headrotate.hide();
            this.headrotate.remove();
            this.headrotate.cleanupfull();
            this.headrotate = null;
        }
        if (!(this.partsarray == null)) {
            var1 = this.partsarray.__length - 1;
            var2 = 0;
            while (var1 >= var2) {
                this.partsarray[var1 - var2] = null;
                var2 = var2 + 1;
            }
            this.partsarray = null;
        }
        return null;
    }
    
    method initshort() {
        this.timeonscreen = 0.0;
        return null;
    }
    
    method cleanupshort() {
        this.hide();
        return null;
    }
    
    method setoffx() {
        if ((this.energybar.__length - 1) > (this.lifebar.__length - 1)) {
            this.offx = 0 - this.energybar[this.energybar.__length - 1].x2;
        }
        else {
            this.offx = 0 - this.lifebar[this.lifebar.__length - 1].x2;
        }
        return null;
    }
    
    method add() {
        var var1;
        var var2;
        var var3;
        var1 = 0;
        while ((this.partsarray.__length - 1) >= var1) {
            if (__isarray(this.partsarray[var1])) {
                var2 = this.partsarray[var1];
                var3 = 0;
                while ((var2.__length - 1) >= var3) {
                    var2[var3].add();
                    var3 = var3 + 1;
                }
            }
            else {
                this.partsarray[var1].add();
            }
            var1 = var1 + 1;
        }
        this.headrotate.gotoframe(24, 1);
        return null;
    }
    
    method show() {
        var var1;
        var var2;
        var var3;
        var1 = 0;
        while ((this.partsarray.__length - 1) >= var1) {
            if (__isarray(this.partsarray[var1])) {
                var2 = this.partsarray[var1];
                var3 = 0;
                while ((var2.__length - 1) >= var3) {
                    var2[var3].show();
                    var3 = var3 + 1;
                }
            }
            else {
                this.partsarray[var1].show();
            }
            var1 = var1 + 1;
        }
        globalclass.player.removelife(0);
        globalclass.player.removeenergy(0);
        this.glowyeyes[1].hide();
        this.timeonscreen = 0.0;
        return null;
    }
    
    method hide() {
        var var1;
        var var2;
        var var3;
        this.setxpos(this.offx);
        this.headrotate.gotoframe(0, 1);
        this.fadeeyes(0);
        this.onscreen = 0;
        var1 = 0;
        while ((this.partsarray.__length - 1) >= var1) {
            if (__isarray(this.partsarray[var1])) {
                var2 = this.partsarray[var1];
                var3 = 0;
                while ((var2.__length - 1) >= var3) {
                    var2[var3].hide();
                    var3 = var3 + 1;
                }
            }
            else {
                this.partsarray[var1].hide();
            }
            var1 = var1 + 1;
        }
        return null;
    }
    
    method changepos(param1) {
        var var1;
        var var2;
        var var3;
        var1 = 0;
        while ((this.partsarray.__length - 1) >= var1) {
            if (__isarray(this.partsarray[var1])) {
                var2 = this.partsarray[var1];
                var3 = 0;
                while ((var2.__length - 1) >= var3) {
                    var2[var3].changepos(param1);
                    var3 = var3 + 1;
                }
            }
            else {
                this.partsarray[var1].changepos(param1);
            }
            var1 = var1 + 1;
        }
        return null;
    }
    
    method setxpos(param1) {
        var var1;
        var1 = param1 - this.headrotate.x1;
        this.changepos(var1);
        return null;
    }
    
    method process(param1) {
        if (this.onscreen == 1) {
            this.timeonscreen = this.timeonscreen + param1.deltatime;
            if (this.timeonscreen > 10) {
                this.slide(0);
                this.timeonscreen = 0.0;
            }
            if (!(this.headrotate == null)) {
                this.headrotate.process(param1);
            }
            if (this.movement < 0) {
                this.changepos(-10);
                if (this.headrotate.x1 <= this.offx) {
                    this.movement = 0;
                    this.onscreen = 0;
                }
            }
            if (this.movement > 0) {
                this.changepos(10);
                if (this.headrotate.x1 >= 10) {
                    this.movement = 0;
                    this.rotatehead(1);
                }
            }
        }
        return null;
    }
    
    method onevent(param1) {
        if (param1.eventid == 1004) {
            if (param1.args[0] == this.headrotate.handle) {
                if (param1.args[1] == 0) {
                    this.movement = -1;
                }
                else {
                    this.fadeeyes(1);
                }
            }
        }
        param1.eventid;
        return null;
    }
    
    method slide(param1) {
        if ((param1 == 1) && (this.onscreen == 0)) {
            this.movement = 1;
            this.timeonscreen = 0.0;
            this.onscreen = 1;
        }
        else if (this.onscreen == 1) {
            this.fadeeyes(0);
            this.rotatehead(0);
        }
        return null;
    }
    
    method rotatehead(param1) {
        this.headrotate.animloop(1, param1);
        return null;
    }
    
    method fadeeyes(param1) {
        if (param1 == 1) {
            this.glowyeyes[0].show();
        }
        else {
            this.glowyeyes[0].hide();
            this.glowyeyes[1].hide();
        }
        return null;
    }
    
    method setlife(param1) {
        var var1;
        this.timeonscreen = 0.0;
        var1 = 0;
        while ((this.redlites.__length - 1) >= var1) {
            if (var1 < param1) {
                this.redlites[var1].show();
            }
            else {
                this.redlites[var1].hide();
            }
            var1 = var1 + 1;
        }
        if (this.onscreen == 0) {
            this.slide(1);
        }
        return null;
    }
    
    method setenergy(param1) {
        var var1;
        this.timeonscreen = 0.0;
        var1 = 0;
        while ((this.greenlites.__length - 1) >= var1) {
            if (var1 < param1) {
                this.greenlites[var1].show();
            }
            else {
                this.greenlites[var1].hide();
            }
            var1 = var1 + 1;
        }
        if (this.onscreen == 0) {
            this.slide(1);
        }
        return null;
    }
    
    method addmaxlife() {
        var var1;
        var var2;
        this.timeonscreen = 0.0;
        debug::print("new piece of life");
        var1 = this.lifebar.__length - 1;
        var2 = new ss_basesprite("Root/data/art/hud/16x16circle__clr", this.lifebar[var1].x1, this.lifebar[var1].y1, 0, this.lifebar[var1].x2, this.lifebar[var1].y2);
        var2.initfull();
        var2.enablealphachannel(1);
        var2.add();
        var2.show();
        this.lifebar.__insertat(var1, var2);
        this.lifebar[var1 + 1].changepos(16, 0);
        var1 = this.redlites.__length - 1;
        var2 = new ss_basesprite("Root/data/art/hud/1redon", this.redlites[var1].x1 + 16, this.redlites[var1].y1, 0, this.redlites[var1].x2 + 16, this.redlites[var1].y2);
        var2.initfull();
        var2.enablealphachannel(1);
        var2.add();
        var2.hide();
        this.redlites.__append(var2);
        this.setoffx();
        if (this.onscreen == 0) {
            this.slide(1);
        }
        return null;
    }
    
    method removemaxlife() {
        if (this.onscreen == 0) {
            this.slide(1);
        }
        else {
            this.timeonscreen = 0.0;
        }
        return null;
    }
    
    method addmaxenergy() {
        var var1;
        var var2;
        this.timeonscreen = 0.0;
        debug::print("new piece of energy");
        var1 = this.energybar.__length - 1;
        var2 = new ss_basesprite("Root/data/art/hud/16x16circle__clr", this.energybar[var1].x1, this.energybar[var1].y1, 0, this.energybar[var1].x2, this.energybar[var1].y2);
        var2.initfull();
        var2.enablealphachannel(1);
        var2.add();
        var2.show();
        this.energybar.__insertat(var1, var2);
        this.energybar[var1 + 1].changepos(16, 0);
        var1 = this.greenlites.__length - 1;
        var2 = new ss_basesprite("Root/data/art/hud/1greenon", this.greenlites[var1].x1 + 16, this.greenlites[var1].y1, 0, this.greenlites[var1].x2 + 16, this.greenlites[var1].y2);
        var2.initfull();
        var2.enablealphachannel(1);
        var2.add();
        var2.hide();
        this.greenlites.__append(var2);
        this.setoffx();
        if (this.onscreen == 0) {
            this.slide(1);
        }
        return null;
    }
    
    method removemaxenergy() {
        this.timeonscreen = 0.0;
        if (this.onscreen == 0) {
            this.slide(1);
        }
        return null;
    }
    
    method danger() {
        if (this.onscreen == 0) {
            this.slide(1);
        }
        return null;
    }
}
class ta126_puzzle {
    property parent;
    property pillars;
    property timers;
    property bats;
    property origx;
    property origy;
    property origz;
    property music;
    
    method ta126_puzzle(param1) {
        this.parent = param1;
        return null;
    }
    
    method initfull() {
        var var1;
        var var2;
        gcareadirector::setnearestmax(20);
        this.origx = [  ];
        this.origy = [  ];
        this.origz = [  ];
        this.bats = [ new gs_lego_character("bt00", "btfr", "ta12", 0, 0 - 111.9, 33.2, 0 - 33.4, "aiin"), 
            new gs_lego_character("bt01", "btfr", "ta12", 0, 0 - 112.1, 25.3, 37.7, "aiin"), 
            new gs_lego_character("bt02", "btfr", "ta12", 0, 0 - 97.0, 23.5, 74.4, "aiin"), 
            new gs_lego_character("bt03", "btfr", "ta12", 0, 0 - 119.1, 6.2, 171.7, "aiin"), 
            new gs_lego_character("bt04", "btfr", "ta12", 0, 0 - 314.6, 0 - 36.6, 267.9, "aiin"), 
            new gs_lego_character("bt05", "btfr", "ta12", 0, 0 - 213.6, 0 - 19.6, 373.6, "aiin"), 
            new gs_lego_character("bt06", "btfr", "ta12", 0, 0 - 118.0, 8.3, 464.8, "aiin") ];
        var1 = 0;
        while ((this.bats.__length - 1) >= var1) {
            this.bats[var1].initfull();
            this.bats[var1].add();
            this.bats[var1].show();
            var1 = var1 + 1;
        }
        this.pillars = [ new lego_moveableobject("pl01"), 
            new lego_moveableobject("pl02"), 
            new lego_moveableobject("pl03"), 
            new lego_moveableobject("pl04"), 
            new lego_moveableobject("pl05"), 
            new lego_moveableobject("pl06"), 
            new lego_moveableobject("pl07"), 
            new lego_moveableobject("pl08"), 
            new lego_moveableobject("pl09"), 
            new lego_moveableobject("pl10"), 
            new lego_moveableobject("pl11"), 
            new lego_moveableobject("pl12"), 
            new lego_moveableobject("pl13"), 
            new lego_moveableobject("pl14"), 
            new lego_moveableobject("pl15"), 
            new lego_moveableobject("pl16"), 
            new lego_moveableobject("pl17"), 
            new lego_moveableobject("pl18"), 
            new lego_moveableobject("pl19"), 
            new lego_moveableobject("pl21"), 
            new lego_moveableobject("pl22"), 
            new lego_moveableobject("pl23"), 
            new lego_moveableobject("pl24"), 
            new lego_moveableobject("pl25"), 
            new lego_moveableobject("pl26"), 
            new lego_moveableobject("pl27"), 
            new lego_moveableobject("pl28"), 
            new lego_moveableobject("pl29"), 
            new lego_moveableobject("pl30") ];
        this.timers = [ new lego_timer("pt01", 7.0, 0), 
            new lego_timer("pt02", 7.0, 0), 
            new lego_timer("pt03", 7.0, 0), 
            new lego_timer("pt04", 7.0, 0), 
            new lego_timer("pt05", 7.0, 0), 
            new lego_timer("pt06", 7.0, 0), 
            new lego_timer("pt07", 7.0, 0), 
            new lego_timer("pt08", 7.0, 0), 
            new lego_timer("pt09", 7.0, 0), 
            new lego_timer("pt10", 7.0, 0), 
            new lego_timer("pt11", 7.0, 0), 
            new lego_timer("pt12", 7.0, 0), 
            new lego_timer("pt13", 7.0, 0), 
            new lego_timer("pt14", 7.0, 0), 
            new lego_timer("pt15", 7.0, 0), 
            new lego_timer("pt16", 7.0, 0), 
            new lego_timer("pt17", 7.0, 0), 
            new lego_timer("pt18", 7.0, 0), 
            new lego_timer("pt19", 7.0, 0), 
            new lego_timer("pt21", 7.0, 0), 
            new lego_timer("pt22", 7.0, 0), 
            new lego_timer("pt23", 7.0, 0), 
            new lego_timer("pt24", 7.0, 0), 
            new lego_timer("pt25", 7.0, 0), 
            new lego_timer("pt26", 7.0, 0), 
            new lego_timer("pt27", 7.0, 0), 
            new lego_timer("pt28", 7.0, 0), 
            new lego_timer("pt29", 7.0, 0), 
            new lego_timer("pt30", 7.0, 0) ];
        var1 = 0;
        while ((this.pillars.__length - 1) >= var1) {
            this.pillars[var1].initfull();
            this.pillars[var1].setmoveable(0.1, 0.1, 0, 0, 0, 0);
            this.pillars[var1].show();
            var2 = this.pillars[var1].getx();
            this.origx.__append(var2);
            var2 = this.pillars[var1].gety();
            this.origy.__append(var2);
            var2 = this.pillars[var1].getz();
            this.origz.__append(var2);
            var1 = var1 + 1;
        }
        var1 = 0;
        while ((this.timers.__length - 1) >= var1) {
            this.timers[var1].initfull();
            var1 = var1 + 1;
        }
        if ((this.pillars.__length - 1) != (this.timers.__length - 1)) {
            debug::print("ERROR -- pillars and timers are out of sink (sync) ** ");
        }
        this.music = new legomp3player();
        this.music.setupforplay("Root/Data/sounds/MUSICsurfandsnowboard");
        this.music.play(1);
        return null;
    }
    
    method initshort() {
        var var1;
        var1 = 0;
        while ((this.pillars.__length - 1) >= var1) {
            this.pillars[var1].setmoveableflags(0, 0, 0, 0);
            this.pillars[var1].setpos(this.origx[var1], this.origy[var1], this.origz[var1]);
            var1 = var1 + 1;
        }
        this.music.play(1);
        return null;
    }
    
    method cleanupfull() {
        var var1;
        var1 = 0;
        while ((this.bats.__length - 1) >= var1) {
            this.bats[var1].cleanupfull();
            this.bats[var1] = null;
            var1 = var1 + 1;
        }
        this.bats = null;
        var1 = 0;
        while ((this.pillars.__length - 1) >= var1) {
            this.pillars[var1].cleanupfull();
            this.pillars[var1] = null;
            var1 = var1 + 1;
        }
        this.pillars = null;
        debug::print("*** 1");
        var1 = 0;
        while ((this.timers.__length - 1) >= var1) {
            this.timers[var1].cleanupfull();
            this.timers[var1] = null;
            var1 = var1 + 1;
        }
        this.timers = null;
        debug::print("*** 2");
        this.origx = null;
        this.origy = null;
        this.origz = null;
        if (this.music != null) {
            this.music.stop();
            this.music.cleanupfordestroy();
            this.music = null;
        }
        return null;
    }
    
    method exit() {
        this.parent = null;
        return null;
    }
    
    method process(param1) {
        return null;
    }
    
    method onevent(param1) {
        var var1;
        var var2;
        var var3;
        var var4;
        if (param1.eventid == 46) {
            this.music.stop();
        }
        else if (param1.eventid == 27) {
            this.initshort();
            globalclass.player.actor.gotopos(this.parent.enterstartid, this.parent.enterlookid);
            globalclass.player.unkill();
        }
        else if (param1.eventid == 4) {
            if (param1.args[0] == scslosifoundation::stringtoidentifier("tp02")) {
                debug::print("*****SWITCHING NEXT DOOR IN SHRN TO OPEN");
                screenlist.screens[6].screen.areas[13].puzzle.switchit(1);
            }
            param1.args[0];
        }
        else if (param1.eventid == 19) {
            debug::print("YOU HIT A PILLAR" + scslosifoundation::identifiertostring(param1.args[0]));
            var1 = 0;
            while ((this.pillars.__length - 1) >= var1) {
                if (param1.args[0] == this.pillars[var1].id) {
                    this.pillars[var1].setmoveableflags(1, 0, 0, 1);
                    this.timers[var1].reset(0);
                    this.timers[var1].start();
                }
                var1 = var1 + 1;
            }
        }
        else if (param1.eventid == 8) {
            var1 = 0;
            while ((this.timers.__length - 1) >= var1) {
                if (param1.args[0] == this.timers[var1].id) {
                    var2 = this.pillars[var1].getx();
                    var3 = this.pillars[var1].gety();
                    var4 = this.pillars[var1].getz();
                    this.pillars[var1].interpolate(var2, var3 - 10.0, var4, 3.0);
                }
                var1 = var1 + 1;
            }
        }
        return null;
    }
    
    method input(param1) {
        if (param1.button == 89) {
            if (param1.event == 2) {
                this.cheat();
            }
        }
        return null;
    }
    
    method cheat() {
        var var1;
        debug::print("*****MOVING PILLARS DOWN");
        var1 = 0;
        while ((this.pillars.__length - 1) >= var1) {
            this.pillars[var1].setmoveableflags(1, 0, 0, 1);
            this.timers[var1].reset(0);
            this.timers[var1].start();
            var1 = var1 + 1;
        }
        return null;
    }
}
class cliffscale_class {
    property parent;
    property boulderarray;
    property dropping;
    property targetarray;
    property areaid;
    property resetpoint;
    property orientation;
    property original_maxdist;
    property cliffrumble;
    property timer;
    
    method cliffscale_class(param1) {
        this.parent = param1;
        return null;
    }
    
    method initfull() {
        var var1;
        gcareadirector::setnearestmax(20);
        this.original_maxdist = gcareadirector::getnearestmaxdist();
        gcareadirector::setnearestmaxdist(500);
        this.resetpoint = new basicpoint();
        this.orientation = new basicpoint();
        this.areaid = scslosifoundation::stringtoidentifier(this.parent.name);
        this.targetarray = [ new lego_moveableobject("hot1", this.parent.name), 
            new lego_moveableobject("hot2", this.parent.name), 
            new lego_moveableobject("hot3", this.parent.name), 
            new lego_moveableobject("hot4", this.parent.name) ];
        var1 = 0;
        while ((this.targetarray.__length - 1) >= var1) {
            this.targetarray[var1].initfull();
            this.targetarray[var1].setmytargetingflags(1);
            this.targetarray[var1].setresponse(1, 1, 1);
            var1 = var1 + 1;
        }
        this.timer = new lego_timer("timr", 1, 0);
        this.timer.initfull();
        return null;
    }
    
    method initshort() {
        this.initfull();
        return null;
    }
    
    method cleanupfull() {
        var var1;
        gcareadirector::setnearestmaxdist(this.original_maxdist);
        this.original_maxdist = null;
        var1 = 0;
        while ((this.targetarray.__length - 1) >= var1) {
            this.targetarray[var1].cleanupfull();
            this.targetarray[var1] = null;
            var1 = var1 + 1;
        }
        this.targetarray = null;
        this.resetpoint = null;
        this.orientation = null;
        return null;
    }
    
    method exit() {
        this.parent = null;
        return null;
    }
    
    method process(param1) {
        return null;
    }
    
    method input(param1) {
        return null;
    }
    
    method onevent(param1) {
        var var1;
        if (param1.eventid == 3) {
            if (param1.args[0] == scslosifoundation::stringtoidentifier("tb00")) {
                this.reseta();
            }
        }
        else if (param1.eventid == 8) {
            var1 = param1.args[0];
            if (var1 == scslosifoundation::stringtoidentifier("timr")) {
                this.timer.reset();
                this.resetb();
            }
        }
        else if (param1.eventid == 27) {
            debug::print("Screen Black Event");
            this.resetc();
        }
        else if (param1.eventid == 46) {
            gccollisionphysicsgroup::spinmask(1.2);
        }
        return null;
    }
    
    method reseta(param1) {
        this.parent.parent.cam.setaimode(7);
        this.timer.start();
        return null;
    }
    
    method resetb() {
        globalclass.player.kill();
        return null;
    }
    
    method resetc() {
        globalclass.player.actor.setpos(207.6, 0 - 62.2, 0 - 150.1);
        globalclass.player.actor.setorientation(31.5);
        gccollisionphysicsgroup::toggletriggerboxentered(scslosifoundation::stringtoidentifier("tb00"), 0);
        globalclass.player.unkill();
        this.parent.parent.cam.setaimode(11);
        return null;
    }
    
    method show() {
        return null;
    }
    
    method hide() {
        this.cleanupfull();
        return null;
    }
}
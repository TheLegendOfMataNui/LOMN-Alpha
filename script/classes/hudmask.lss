class hudmask {
    property allmasksarray;
    property currentmask;
    property onscreen;
    property timeonscreen;
    property movement;
    property animating;
    property offx;
    property ydiff;
    
    method hudmask() {
        this.onscreen = 0;
        this.timeonscreen = 0.0;
        return null;
    }
    
    method initfull() {
        this.ydiff = screeny - 480;
        this.currentmask = null;
        this.allmasksarray = [  ];
        this.offx = -84;
        this.movement = 0;
        this.animating = 0;
        this.onscreen = 1;
        this.timeonscreen = 0.0;
        return null;
    }
    
    method cleanupfull() {
        var var1;
        var var2;
        debug::print("[][][]cleanup hud mask");
        if (!(this.allmasksarray == null)) {
            var1 = this.allmasksarray.__length - 1;
            if (var1 >= 0) {
                var2 = 0;
                while (var1 >= var2) {
                    this.allmasksarray[var1 - var2].hide();
                    this.allmasksarray[var1 - var2].remove();
                    this.allmasksarray[var1 - var2].cleanupfull();
                    this.allmasksarray[var1 - var2] = null;
                    var2 = var2 + 1;
                }
            }
            this.allmasksarray = null;
        }
        return null;
    }
    
    method initshort() {
        this.currentmask = null;
        this.timeonscreen = 0.0;
        this.movement = 0;
        return null;
    }
    
    method cleanupshort() {
        var var1;
        this.hide();
        var1 = this.allmasksarray.__length - 1;
        while (var1 >= 0) {
            this.allmasksarray[var1].cleanupfull();
            this.allmasksarray[var1] = null;
            var1 = var1 - 1;
        }
        this.currentmask = null;
        return null;
    }
    
    method add() {
        return null;
    }
    
    method addmask(param1) {
        this.addmasktoarray(new gs_lego_iconrotate(param1, 0, 1));
        return null;
    }
    
    method removemask() {
        return null;
    }
    
    method addmasktoarray(param1) {
        this.allmasksarray.__append(param1);
        param1.initfull();
        param1.add();
        param1.hide();
        param1.setpos(20, 396 + this.ydiff, 84, 460 + this.ydiff);
        return null;
    }
    
    method selectmask(param1) {
        if (!(this.currentmask == null)) {
            this.allmasksarray[this.currentmask].animate(0);
            this.allmasksarray[this.currentmask].hide();
        }
        this.currentmask = param1;
        this.show();
        if (this.onscreen == 0) {
            this.slide(1);
        }
        return null;
    }
    
    method show() {
        if (!(this.currentmask == null)) {
            this.allmasksarray[this.currentmask].show();
            this.allmasksarray[this.currentmask].enablealphachannel(1);
        }
        return null;
    }
    
    method hide() {
        if (!(this.currentmask == null)) {
            this.setxpos(this.offx);
            this.onscreen = 0;
            this.allmasksarray[this.currentmask].hide();
        }
        return null;
    }
    
    method changepos(param1) {
        var var1;
        var1 = 0;
        while ((this.allmasksarray.__length - 1) >= var1) {
            this.allmasksarray[var1].rotate.changepos(param1);
            var1 = var1 + 1;
        }
        return null;
    }
    
    method setxpos(param1) {
        var var1;
        var1 = param1 - this.allmasksarray[0].rotate.x1;
        this.changepos(var1);
        return null;
    }
    
    method animate(param1) {
        this.animating = param1;
        if (this.onscreen == 0) {
            this.slide(1);
        }
        this.allmasksarray[this.currentmask].animate(param1);
        this.timeonscreen = 0.0;
        return null;
    }
    
    method process(param1) {
        if ((this.onscreen == 1) && !(this.currentmask == null)) {
            this.timeonscreen = this.timeonscreen + param1.deltatime;
            if ((this.timeonscreen > 10) && (this.animating == 0)) {
                this.slide(0);
                this.timeonscreen = 0.0;
            }
            if (!(this.currentmask == null)) {
                this.allmasksarray[this.currentmask].process(param1);
            }
            if (this.movement < 0) {
                this.changepos(-10);
                if (this.allmasksarray[0].rotate.x1 <= this.offx) {
                    this.movement = 0;
                    this.onscreen = 0;
                }
            }
            if (this.movement > 0) {
                this.changepos(10);
                if (this.allmasksarray[0].rotate.x1 >= 20) {
                    this.movement = 0;
                }
            }
        }
        return null;
    }
    
    method slide(param1) {
        if ((param1 == 1) && (this.onscreen == 0)) {
            this.movement = 1;
            this.timeonscreen = 0.0;
            this.onscreen = 1;
        }
        else if (this.onscreen == 1) {
            if (globalclass.player.ismaskpoweron() == 1) {
                this.timeonscreen = 0.0;
            }
            else {
                this.movement = -1;
            }
        }
        return null;
    }
}
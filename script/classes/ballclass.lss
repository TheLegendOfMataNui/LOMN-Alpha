class ballclass {
    property obj;
    property name;
    property id;
    property parent;
    property curentscale;
    property ball_1;
    property ball_2;
    property ball_1_name;
    property ball_2_name;
    property numofsnowballs_alive;
    property maxstartingpoint;
    property minstartingpoint;
    property lowestpointbeforredrop;
    property startingvelocity;
    property chaseing;
    property bigsound;
    property medsound;
    property smlsound;
    
    method ballclass(param1, param2, param3, param4, param5, param6) {
        this.parent = param4;
        this.name = param1;
        this.obj = new lego_projectileobject(this.name, this.parent.parent.name);
        this.id = scslosifoundation::stringtoidentifier(this.name);
        this.ball_1_name = param2;
        this.ball_2_name = param3;
        this.ball_1 = new smallballclass(this.ball_1_name, this);
        this.ball_2 = new smallballclass(this.ball_2_name, this);
        this.curentscale = 1.0;
        this.numofsnowballs_alive = 0;
        this.maxstartingpoint = param5;
        this.minstartingpoint = param6;
        this.lowestpointbeforredrop = -390;
        this.startingvelocity = [ new basicpoint(), 
            new basicpoint() ];
        return null;
    }
    
    method initfull() {
        this.obj.init(0.7, 0, 0, 0, 0, 2.3, "bld0", "Root/data/levels/lev1/clf2", 60, -5, -5, -5, 5, 5, 5);
        this.obj.setbouncefactor(0.75);
        this.obj.setbounceeventrepoert(1);
        this.obj.setobjgravity(30);
        this.obj.show();
        this.obj.setresponse(2, 2, 2);
        this.ball_1.initfull();
        this.ball_2.initfull();
        this.chaseing = 0;
        return null;
    }
    
    method cleanupfull() {
        var var1;
        this.obj.cleanupfull();
        this.obj = null;
        this.ball_1.cleanupfull();
        this.ball_1 = null;
        this.ball_2.cleanupfull();
        this.ball_2 = null;
        var1 = 0;
        while ((this.startingvelocity.__length - 1) >= var1) {
            this.startingvelocity[var1].cleanupfull();
            this.startingvelocity[var1] = null;
            var1 = var1 + 1;
        }
        this.startingvelocity = null;
        return null;
    }
    
    method settweakable() {
        this.obj.settweakable();
        return null;
    }
    
    method process(param1) {
        if (this.obj.gety() < this.lowestpointbeforredrop) {
            this.startdropping();
        }
        if (this.obj.getz() > 1936) {
            this.startdropping();
        }
        this.ball_1.process(param1);
        this.ball_2.process(param1);
        return null;
    }
    
    method show() {
        this.obj.show();
        this.ball_1.show();
        this.ball_2.show();
        return null;
    }
    
    method hide() {
        this.obj.hide();
        this.ball_1.hide();
        this.ball_2.hide();
        return null;
    }
    
    method startdropping() {
        var var1;
        var var2;
        var var3;
        var var4;
        var var5;
        var var6;
        var var7;
        this.obj.show();
        this.obj.fadeout(0);
        this.obj.fadein(3);
        var1 = globalclass.randnum.getrandomnumber(this.minstartingpoint.x, this.maxstartingpoint.x);
        var2 = globalclass.randnum.getrandomnumber(this.minstartingpoint.y, this.maxstartingpoint.y);
        var3 = globalclass.randnum.getrandomnumber(this.minstartingpoint.z, this.maxstartingpoint.z);
        var4 = globalclass.randnum.getrandomnumber(250, 400);
        this.curentscale = var4 * 0.01;
        this.obj.setobjscale(this.curentscale);
        this.obj.setposition(var1, var2, var3);
        this.obj.setmoveableflags(1, 1, 0, 1);
        var5 = globalclass.randnum.getrandomnumber(this.startingvelocity[1].x, this.startingvelocity[0].x);
        var6 = globalclass.randnum.getrandomnumber(this.startingvelocity[1].y, this.startingvelocity[0].y);
        var7 = globalclass.randnum.getrandomnumber(this.startingvelocity[1].z, this.startingvelocity[0].z);
        this.obj.setvelocity(var5, var6, var7);
        return null;
    }
    
    method stopdropping() {
        this.obj.setvelocity(0, 0, 0);
        this.obj.setmoveableflags(0, 0, 0, 0);
        this.obj.setposition(1000, 0, 0);
        return null;
    }
    
    method onevent(param1) {
        this.ball_1.onevent(param1);
        this.ball_2.onevent(param1);
        if (param1.eventid == 19) {
            if (param1.args[0] == this.obj.id) {
                this.hit();
            }
        }
        else if (param1.eventid == 17) {
            if (param1.args[0] == this.id) {
                this.shakecam(param1.args[1]);
                if (param1.args[1] > 25) {
                    this.hit();
                }
            }
        }
        return null;
    }
    
    method hit() {
        this.curentscale = this.obj.getscale();
        if (this.curentscale < 3) {
            this.split();
        }
        else {
            this.obj.setobjscale(this.curentscale - 1);
        }
        return null;
    }
    
    method shakecam(param1) {
        var var1;
        var var2;
        var var3;
        var1 = this.obj.gety();
        var2 = this.obj.getz();
        var3 = globalclass.player.actor.getpos().z;
        if ((var1 > -380) & (var1 < -350)) {
            if ((var2 > (var3 - 10)) & (var2 < (var3 + 10))) {
                if (param1 > 40) {
                    this.parent.parent.level.cam.shakecamera(0.1, 0.18);
                }
                else if (param1 > 20) {
                    this.parent.parent.level.cam.shakecamera(0.1, 0.1);
                }
            }
            else if ((var2 > (var3 - 30)) & (var2 < (var3 + 30))) {
                if (param1 > 20) {
                    this.parent.parent.level.cam.shakecamera(0.05, 0.05);
                }
            }
        }
        return null;
    }
    
    method input(param1) {
        this.ball_1.input(param1);
        this.ball_2.input(param1);
        if (param1.event == 2) {
            if (param1.button == 79) {
                this.hit();
            }
        }
        if (param1.event == 2) {
            if (param1.button == 84) {
                this.dropsmallball_1();
            }
        }
        return null;
    }
    
    method split() {
        if (this.curentscale > 2) {
            this.dropsmallball_1();
            this.dropsmallball_2();
            this.stopdropping();
        }
        else if (this.curentscale > 1) {
            this.dropsmallball_1();
            this.stopdropping();
        }
        else {
            this.startdropping();
        }
        return null;
    }
    
    method dropsmallball_1() {
        this.ball_1.startdropping(this.obj.getx(), this.obj.gety(), this.obj.getz() + 5);
        return null;
    }
    
    method dropsmallball_2() {
        this.ball_2.startdropping(this.obj.getx(), this.obj.gety(), this.obj.getz() - 5);
        return null;
    }
    
    method killsmallsnowball(param1) {
        this.numofsnowballs_alive = this.numofsnowballs_alive + param1;
        if (this.numofsnowballs_alive < 1) {
            this.startdropping();
        }
        return null;
    }
    
    method setlowestpointbeforredrop(param1) {
        this.lowestpointbeforredrop = param1;
        return null;
    }
    
    method setstartingvelocity(param1, param2) {
        this.startingvelocity[0] = param1;
        this.startingvelocity[1] = param2;
        return null;
    }
    
    method chasetoa(param1) {
        if ((param1 > 0) & (this.chaseing == 0)) {
            this.chaseing = 1;
            this.obj.chasetoa(param1);
        }
        if ((param1 == 0) & (this.chaseing == 1)) {
            this.chaseing = 0;
            this.obj.chasetoa(0);
        }
        return null;
    }
}
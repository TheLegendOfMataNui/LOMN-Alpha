class hudelement {
    property allelementsarray;
    property currentelement;
    property onscreen;
    property timeonscreen;
    property animating;
    property movement;
    property offx;
    property elementx1;
    property elementy1;
    
    method hudelement() {
        this.onscreen = 0;
        this.timeonscreen = 0.0;
        return null;
    }
    
    method initfull() {
        this.elementx1 = screenx - 640;
        this.elementy1 = screeny - 480;
        this.currentelement = null;
        this.allelementsarray = [  ];
        this.offx = screenx + 20;
        this.movement = 0;
        this.animating = 0;
        this.onscreen = 1;
        this.timeonscreen = 0.0;
        return null;
    }
    
    method cleanupfull() {
        var var1;
        var var2;
        debug::print("[][][]cleanup hud element");
        if (!(this.allelementsarray == null)) {
            var1 = this.allelementsarray.__length - 1;
            if (var1 >= 0) {
                var2 = 0;
                while (var1 >= var2) {
                    this.allelementsarray[var1 - var2].hide();
                    this.allelementsarray[var1 - var2].remove();
                    this.allelementsarray[var1 - var2].cleanupfull();
                    this.allelementsarray[var1 - var2] = null;
                    var2 = var2 + 1;
                }
            }
            this.allelementsarray = null;
        }
        return null;
    }
    
    method initshort() {
        this.currentelement = null;
        this.timeonscreen = 0.0;
        this.movement = 0;
        return null;
    }
    
    method cleanupshort() {
        var var1;
        this.hide();
        var1 = this.allelementsarray.__length - 1;
        while (var1 >= 0) {
            this.allelementsarray[var1].cleanupfull();
            this.allelementsarray[var1] = null;
            var1 = var1 - 1;
        }
        this.currentelement = null;
        return null;
    }
    
    method add() {
        return null;
    }
    
    method addelement(param1) {
        this.addelementtoarray(new gs_lego_iconrotate(param1, 0, 1));
        return null;
    }
    
    method removeelement() {
        return null;
    }
    
    method addelementtoarray(param1) {
        this.allelementsarray.__append(param1);
        param1.initfull();
        param1.add();
        param1.hide();
        param1.setpos(556 + this.elementx1, 396 + this.elementy1, 620 + this.elementx1, 460 + this.elementy1);
        return null;
    }
    
    method selectelement(param1) {
        if (!(this.currentelement == null)) {
            this.allelementsarray[this.currentelement].animate(0);
            this.allelementsarray[this.currentelement].hide();
        }
        this.currentelement = param1;
        this.show();
        if (this.onscreen == 0) {
            this.slide(1);
        }
        return null;
    }
    
    method show() {
        if (!(this.currentelement == null)) {
            this.allelementsarray[this.currentelement].show();
            this.allelementsarray[this.currentelement].enablealphachannel(1);
            this.allelementsarray[this.currentelement].animate(1);
        }
        return null;
    }
    
    method hide() {
        if (!(this.currentelement == null)) {
            this.setxpos(this.offx);
            this.onscreen = 0;
            this.allelementsarray[this.currentelement].hide();
        }
        return null;
    }
    
    method changepos(param1) {
        var var1;
        var1 = 0;
        while ((this.allelementsarray.__length - 1) >= var1) {
            this.allelementsarray[var1].rotate.changepos(param1);
            var1 = var1 + 1;
        }
        return null;
    }
    
    method setxpos(param1) {
        var var1;
        var1 = param1 - this.allelementsarray[0].rotate.x1;
        this.changepos(var1);
        return null;
    }
    
    method touch() {
        this.timeonscreen = 0.0;
        return null;
    }
    
    method animate(param1) {
        this.animating = param1;
        if (this.onscreen == 0) {
            this.slide(1);
        }
        this.allelementsarray[this.currentelement].animate(param1);
        this.timeonscreen = 0.0;
        return null;
    }
    
    method process(param1) {
        if ((this.onscreen == 1) && !(this.currentelement == null)) {
            this.timeonscreen = this.timeonscreen + param1.deltatime;
            if ((this.timeonscreen > 10) && (this.animating == 0)) {
                this.slide(0);
                this.timeonscreen = 0.0;
            }
            if (!(this.currentelement == null)) {
                this.allelementsarray[this.currentelement].process(param1);
            }
            if (this.movement < 0) {
                this.changepos(-10);
                if (this.allelementsarray[0].rotate.x1 <= (556 + this.elementx1)) {
                    this.movement = 0;
                }
            }
            if (this.movement > 0) {
                this.changepos(10);
                if (this.allelementsarray[0].rotate.x1 >= this.offx) {
                    this.movement = 0;
                    this.onscreen = 0;
                }
            }
        }
        return null;
    }
    
    method slide(param1) {
        if ((param1 == 1) && (this.onscreen == 0)) {
            this.movement = -1;
            this.timeonscreen = 0.0;
            this.onscreen = 1;
        }
        else if (this.onscreen == 1) {
            this.movement = 1;
        }
        return null;
    }
}